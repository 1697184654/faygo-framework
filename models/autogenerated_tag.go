// Code generated by go-queryset. DO NOT EDIT.
package models

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set TagQuerySet

// TagQuerySet is an queryset type for Tag
type TagQuerySet struct {
	db *gorm.DB
}

// NewTagQuerySet constructs new TagQuerySet
func NewTagQuerySet(db *gorm.DB) TagQuerySet {
	return TagQuerySet{
		db: db.Model(&Tag{}),
	}
}

func (qs TagQuerySet) w(db *gorm.DB) TagQuerySet {
	return NewTagQuerySet(db)
}

// AliasEq is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) AliasEq(alias string) TagQuerySet {
	return qs.w(qs.db.Where("alias = ?", alias))
}

// AliasIn is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) AliasIn(alias string, aliasRest ...string) TagQuerySet {
	iArgs := []interface{}{alias}
	for _, arg := range aliasRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("alias IN (?)", iArgs))
}

// AliasNe is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) AliasNe(alias string) TagQuerySet {
	return qs.w(qs.db.Where("alias != ?", alias))
}

// AliasNotIn is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) AliasNotIn(alias string, aliasRest ...string) TagQuerySet {
	iArgs := []interface{}{alias}
	for _, arg := range aliasRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("alias NOT IN (?)", iArgs))
}

// All is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) All(ret *[]Tag) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *Tag) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) CreatedAtEq(createdAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) CreatedAtGt(createdAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) CreatedAtGte(createdAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) CreatedAtLt(createdAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) CreatedAtLte(createdAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) CreatedAtNe(createdAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Tag) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) Delete() error {
	return qs.db.Delete(Tag{}).Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DeletedAtEq(deletedAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DeletedAtGt(deletedAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DeletedAtGte(deletedAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DeletedAtIsNotNull() TagQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DeletedAtIsNull() TagQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DeletedAtLt(deletedAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DeletedAtLte(deletedAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) DeletedAtNe(deletedAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) GetUpdater() TagUpdater {
	return NewTagUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) IDEq(ID uint) TagQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) IDGt(ID uint) TagQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) IDGte(ID uint) TagQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) IDIn(ID uint, IDRest ...uint) TagQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) IDLt(ID uint) TagQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) IDLte(ID uint) TagQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) IDNe(ID uint) TagQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) IDNotIn(ID uint, IDRest ...uint) TagQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) Limit(limit int) TagQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) NameEq(name string) TagQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) NameIn(name string, nameRest ...string) TagQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name IN (?)", iArgs))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) NameNe(name string) TagQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) NameNotIn(name string, nameRest ...string) TagQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", iArgs))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs TagQuerySet) One(ret *Tag) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderAscByCreatedAt() TagQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderAscByDeletedAt() TagQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderAscByID() TagQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderAscByUpdatedAt() TagQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderDescByCreatedAt() TagQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderDescByDeletedAt() TagQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderDescByID() TagQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) OrderDescByUpdatedAt() TagQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// SetAlias is an autogenerated method
// nolint: dupl
func (u TagUpdater) SetAlias(alias string) TagUpdater {
	u.fields[string(TagDBSchema.Alias)] = alias
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u TagUpdater) SetCreatedAt(createdAt time.Time) TagUpdater {
	u.fields[string(TagDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u TagUpdater) SetDeletedAt(deletedAt *time.Time) TagUpdater {
	u.fields[string(TagDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u TagUpdater) SetID(ID uint) TagUpdater {
	u.fields[string(TagDBSchema.ID)] = ID
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u TagUpdater) SetName(name string) TagUpdater {
	u.fields[string(TagDBSchema.Name)] = name
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u TagUpdater) SetUpdatedAt(updatedAt time.Time) TagUpdater {
	u.fields[string(TagDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u TagUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u TagUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) UpdatedAtEq(updatedAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) UpdatedAtGt(updatedAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) UpdatedAtGte(updatedAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) UpdatedAtLt(updatedAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) UpdatedAtLte(updatedAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs TagQuerySet) UpdatedAtNe(updatedAt time.Time) TagQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// ===== END of query set TagQuerySet

// ===== BEGIN of Tag modifiers

// TagDBSchemaField describes database schema field. It requires for method 'Update'
type TagDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f TagDBSchemaField) String() string {
	return string(f)
}

// TagDBSchema stores db field names of Tag
var TagDBSchema = struct {
	ID        TagDBSchemaField
	CreatedAt TagDBSchemaField
	UpdatedAt TagDBSchemaField
	DeletedAt TagDBSchemaField
	Name      TagDBSchemaField
	Alias     TagDBSchemaField
}{

	ID:        TagDBSchemaField("id"),
	CreatedAt: TagDBSchemaField("created_at"),
	UpdatedAt: TagDBSchemaField("updated_at"),
	DeletedAt: TagDBSchemaField("deleted_at"),
	Name:      TagDBSchemaField("name"),
	Alias:     TagDBSchemaField("alias"),
}

// Update updates Tag fields by primary key
// nolint: dupl
func (o *Tag) Update(db *gorm.DB, fields ...TagDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"created_at": o.CreatedAt,
		"updated_at": o.UpdatedAt,
		"deleted_at": o.DeletedAt,
		"name":       o.Name,
		"alias":      o.Alias,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Tag %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// TagUpdater is an Tag updates manager
type TagUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewTagUpdater creates new Tag updater
// nolint: dupl
func NewTagUpdater(db *gorm.DB) TagUpdater {
	return TagUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Tag{}),
	}
}

// ===== END of Tag modifiers

// ===== END of all query sets
