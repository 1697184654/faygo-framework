// Code generated by go-queryset. DO NOT EDIT.
package models

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set AdministratorQuerySet

// AdministratorQuerySet is an queryset type for Administrator
type AdministratorQuerySet struct {
	db *gorm.DB
}

// NewAdministratorQuerySet constructs new AdministratorQuerySet
func NewAdministratorQuerySet(db *gorm.DB) AdministratorQuerySet {
	return AdministratorQuerySet{
		db: db.Model(&Administrator{}),
	}
}

func (qs AdministratorQuerySet) w(db *gorm.DB) AdministratorQuerySet {
	return NewAdministratorQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) All(ret *[]Administrator) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *Administrator) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) CreatedAtEq(createdAt time.Time) AdministratorQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) CreatedAtGt(createdAt time.Time) AdministratorQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) CreatedAtGte(createdAt time.Time) AdministratorQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) CreatedAtLt(createdAt time.Time) AdministratorQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) CreatedAtLte(createdAt time.Time) AdministratorQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) CreatedAtNe(createdAt time.Time) AdministratorQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) Delete() error {
	return qs.db.Delete(Administrator{}).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Administrator) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) DeletedAtEq(deletedAt time.Time) AdministratorQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) DeletedAtGt(deletedAt time.Time) AdministratorQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) DeletedAtGte(deletedAt time.Time) AdministratorQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) DeletedAtIsNotNull() AdministratorQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) DeletedAtIsNull() AdministratorQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) DeletedAtLt(deletedAt time.Time) AdministratorQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) DeletedAtLte(deletedAt time.Time) AdministratorQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) DeletedAtNe(deletedAt time.Time) AdministratorQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) GetUpdater() AdministratorUpdater {
	return NewAdministratorUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) IDEq(ID uint) AdministratorQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) IDGt(ID uint) AdministratorQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) IDGte(ID uint) AdministratorQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) IDIn(ID uint, IDRest ...uint) AdministratorQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) IDLt(ID uint) AdministratorQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) IDLte(ID uint) AdministratorQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) IDNe(ID uint) AdministratorQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) IDNotIn(ID uint, IDRest ...uint) AdministratorQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) Limit(limit int) AdministratorQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs AdministratorQuerySet) One(ret *Administrator) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) OrderAscByCreatedAt() AdministratorQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) OrderAscByDeletedAt() AdministratorQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) OrderAscByID() AdministratorQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) OrderAscByUpdatedAt() AdministratorQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) OrderDescByCreatedAt() AdministratorQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) OrderDescByDeletedAt() AdministratorQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) OrderDescByID() AdministratorQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) OrderDescByUpdatedAt() AdministratorQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// PasswordEq is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) PasswordEq(password string) AdministratorQuerySet {
	return qs.w(qs.db.Where("password = ?", password))
}

// PasswordIn is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) PasswordIn(password string, passwordRest ...string) AdministratorQuerySet {
	iArgs := []interface{}{password}
	for _, arg := range passwordRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("password IN (?)", iArgs))
}

// PasswordNe is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) PasswordNe(password string) AdministratorQuerySet {
	return qs.w(qs.db.Where("password != ?", password))
}

// PasswordNotIn is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) PasswordNotIn(password string, passwordRest ...string) AdministratorQuerySet {
	iArgs := []interface{}{password}
	for _, arg := range passwordRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("password NOT IN (?)", iArgs))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u AdministratorUpdater) SetCreatedAt(createdAt time.Time) AdministratorUpdater {
	u.fields[string(AdministratorDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u AdministratorUpdater) SetDeletedAt(deletedAt *time.Time) AdministratorUpdater {
	u.fields[string(AdministratorDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u AdministratorUpdater) SetID(ID uint) AdministratorUpdater {
	u.fields[string(AdministratorDBSchema.ID)] = ID
	return u
}

// SetPassword is an autogenerated method
// nolint: dupl
func (u AdministratorUpdater) SetPassword(password string) AdministratorUpdater {
	u.fields[string(AdministratorDBSchema.Password)] = password
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u AdministratorUpdater) SetUpdatedAt(updatedAt time.Time) AdministratorUpdater {
	u.fields[string(AdministratorDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SetUsername is an autogenerated method
// nolint: dupl
func (u AdministratorUpdater) SetUsername(username string) AdministratorUpdater {
	u.fields[string(AdministratorDBSchema.Username)] = username
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u AdministratorUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u AdministratorUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) UpdatedAtEq(updatedAt time.Time) AdministratorQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) UpdatedAtGt(updatedAt time.Time) AdministratorQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) UpdatedAtGte(updatedAt time.Time) AdministratorQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) UpdatedAtLt(updatedAt time.Time) AdministratorQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) UpdatedAtLte(updatedAt time.Time) AdministratorQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) UpdatedAtNe(updatedAt time.Time) AdministratorQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// UsernameEq is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) UsernameEq(username string) AdministratorQuerySet {
	return qs.w(qs.db.Where("username = ?", username))
}

// UsernameIn is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) UsernameIn(username string, usernameRest ...string) AdministratorQuerySet {
	iArgs := []interface{}{username}
	for _, arg := range usernameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("username IN (?)", iArgs))
}

// UsernameNe is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) UsernameNe(username string) AdministratorQuerySet {
	return qs.w(qs.db.Where("username != ?", username))
}

// UsernameNotIn is an autogenerated method
// nolint: dupl
func (qs AdministratorQuerySet) UsernameNotIn(username string, usernameRest ...string) AdministratorQuerySet {
	iArgs := []interface{}{username}
	for _, arg := range usernameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("username NOT IN (?)", iArgs))
}

// ===== END of query set AdministratorQuerySet

// ===== BEGIN of Administrator modifiers

// AdministratorDBSchemaField describes database schema field. It requires for method 'Update'
type AdministratorDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f AdministratorDBSchemaField) String() string {
	return string(f)
}

// AdministratorDBSchema stores db field names of Administrator
var AdministratorDBSchema = struct {
	ID        AdministratorDBSchemaField
	CreatedAt AdministratorDBSchemaField
	UpdatedAt AdministratorDBSchemaField
	DeletedAt AdministratorDBSchemaField
	Username  AdministratorDBSchemaField
	Password  AdministratorDBSchemaField
}{

	ID:        AdministratorDBSchemaField("id"),
	CreatedAt: AdministratorDBSchemaField("created_at"),
	UpdatedAt: AdministratorDBSchemaField("updated_at"),
	DeletedAt: AdministratorDBSchemaField("deleted_at"),
	Username:  AdministratorDBSchemaField("username"),
	Password:  AdministratorDBSchemaField("password"),
}

// Update updates Administrator fields by primary key
// nolint: dupl
func (o *Administrator) Update(db *gorm.DB, fields ...AdministratorDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"created_at": o.CreatedAt,
		"updated_at": o.UpdatedAt,
		"deleted_at": o.DeletedAt,
		"username":   o.Username,
		"password":   o.Password,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Administrator %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// AdministratorUpdater is an Administrator updates manager
type AdministratorUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewAdministratorUpdater creates new Administrator updater
// nolint: dupl
func NewAdministratorUpdater(db *gorm.DB) AdministratorUpdater {
	return AdministratorUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Administrator{}),
	}
}

// ===== END of Administrator modifiers

// ===== END of all query sets
